# The file including this file must define the following variables:
# PROJECT_NAME
# PROJECT_ROOT
# BASE_OBJ_DIR
# BASE_LIB_DIR
# BASE_BIN_DIR
# BASE_SRC_DIR
# PROJECT_MODULES
# PROJECT_SOURCES
# PROJECT_GEN_SOURCES (autogenerated source files)
# A target called toplevel which builds all the required targets
# We'll recurse on this target with different variable values

FEAT_FLAGS=-fPIC

.PHONY: opt optlto debug prof proflto eopt eoptlto eproflto eprof fulllto fullltoprof clean distclean fullclean all default toplevel

default: debug

opt:
	@echo "Building opt flavor..."
	@OPTFLAGS="-O2 -flto" BUILD_SUFFIX=opt $(MAKE) --no-print-directory toplevel

debug:
	@echo "Building debug flavor..."
	@OPTFLAGS="-ggdb3 -fno-inline -O0" BUILD_SUFFIX=debug $(MAKE) --no-print-directory toplevel

prof:
	@echo "Building prof flavor..."
	@OPTFLAGS="-O2 -pg" BUILD_SUFFIX=prof $(MAKE) --no-print-directory toplevel

eopt:
	@echo "Building eopt flavor..."
	@OPTFLAGS="-O3" BUILD_SUFFIX=opt $(MAKE) --no-print-directory toplevel

eprof:
	@echo "Building eprof flavor..."
	@OPTFLAGS="-O3 -pg" BUILD_SUFFIX=prof $(MAKE) --no-print-directory toplevel

proflto:
	@echo "Building proflto flavor..."
	@OPTFLAGS="-O2 -pg -flto" LTO_BUILD="yes" BUILD_SUFFIX=prof $(MAKE) --no-print-directory toplevel

eoptlto:
	@echo "Building eoptlto flavor..."
	@OPTFLAGS="-O3 -flto" LTO_BUILD="yes" BUILD_SUFFIX=opt $(MAKE) --no-print-directory toplevel

eproflto:
	@echo "Building eproflto flavor..."
	@OPTFLAGS="-O3 -pg -flto" LTO_BUILD="yes" BUILD_SUFFIX=prof $(MAKE) --no-print-directory toplevel

fulllto:
	@echo "Building fulllto flavor..."
	@OPTFLAGS="-O3 -pg -flto" LTO_BUILD="yes" FULL_LTO_BUILD="yes" BUILD_SUFFIX=opt $(MAKE) --no-print-directory toplevel

fullltoprof:
	@echo "Building fullltoprof flavor..."
	@OPTFLAGS="-O3 -pg -flto" LTO_BUILD="yes" FULL_LTO_BUILD="yes" BUILD_SUFFIX=prof $(MAKE) --no-print-directory toplevel


OBJ_DIR=$(BASE_OBJ_DIR)/$(BUILD_SUFFIX)
LIB_DIR=$(BASE_LIB_DIR)/$(BUILD_SUFFIX)
BIN_DIR=$(BASE_BIN_DIR)/$(BUILD_SUFFIX)

DEPPRINTNAME="[$(PROJECT_NAME):dep]"
CXXPRINTNAME="[$(PROJECT_NAME):cxx]"
ARPRINTNAME="[$(PROJECT_NAME):ar]"
LDPRINTNAME="[$(PROJECT_NAME):ld]"

VPATH=$(addsuffix /:, $(addprefix $(BASE_SRC_DIR)/, $(PROJECT_MODULES)))

PROJECT_OBJS=$(addprefix $(PROJECT_ROOT)/obj/$(BUILD_SUFFIX)/, $(PROJECT_SOURCES:.cpp=.o))
PROJECT_DEPS=$(addprefix $(PROJECT_ROOT)/obj/$(BUILD_SUFFIX)/, $(PROJECT_SOURCES:.cpp=.d))
PROJECT_GEN_OBJS=$(addprefix $(PROJECT_ROOT)/gen/, $(PROJECT_GEN_SOURCES:.cpp=.o));
PROJECT_GEN_DEPS=$(addprefix $(PROJECT_ROOT)/gen/, $(PROJECT_GEN_SOURCES:.cpp=.o));

# template for deps
$(OBJ_DIR)/%.d: %.cpp
ifeq "x$(VERBOSE_BUILD)" "x"
	@set -e; rm -f $@; \
	echo "$(DEPPRINTNAME) `basename $<`"; \
	$(CXX) -MM -MF $@ -MT "$(OBJ_DIR)/$(strip $(patsubst %.cpp, %.o, $(notdir $<)))" \
	-MT "$(OBJ_DIR)/$(strip $(patsubst %.cpp, %.d, $(notdir $<)))" $(CXXFLAGS) $<
else 
	@set -e; rm -f $@; \
	echo "Calculating dependencies for `basename $<`..."; \
	$(CXX) -MM -MF $@ -MT "$(OBJ_DIR)/$(strip $(patsubst %.cpp, %.o, $(notdir $<)))" \
	-MT "$(OBJ_DIR)/$(strip $(patsubst %.cpp, %.d, $(notdir $<)))" $(CXXFLAGS) $<
endif

# template for objs
$(OBJ_DIR)/%.o: %.cpp $(OBJ_DIR)/%.d
ifeq "x$(VERBOSE_BUILD)" "x"
	@echo "$(CXXPRINTNAME) `basename $<` --> `basename $@`"; \
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) $(FEAT_FLAGS) -c $< -o $@
else
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) $(FEAT_FLAGS) -c $< -o $@
endif

# template for building dependent modules
# arg1: the name of the module
# arg2: the directory of the module
# arg3: post build commands 
# arg4: the placeholder file
define depmodule_build =
$(4):
	@echo "Building module $(1)";
	make -C $(2)
	$(3)
endef


# template for libs
# arg1: the (base)name of the library
# arg2: list of OBJS
# arg3: list of additional flags to ar
# arg4: list of additional flags to ld
define lib_build =
$(LIB_DIR)/$(1).a:	$(2)
ifeq "x$(VERBOSE_BUILD)" "x"
	@echo "$(ARPRINTNAME) `basename $@`"; \
	$(AR) $(ARFLAGS) $(3) $@ $(2)
else 
	$(AR) $(ARFLAGS) $(3) $@ $(2)
endif
$(LIB_DIR)/$(1).so: $(2)
ifeq "x$(VERBOSE_BUILD)" "x"
	@echo "$(LDPRINTNAME) `basename $@`"; \
	$(LD) -shared $(LDFLAGS) $(4) $(2) -o $@
else 
	$(LD) -shared $(LDFLAGS) $(4) $(2) -o $@
endif
endef

# template for executables
# arg1: the name of executable
# arg2: list of objs
# arg3: list of shared libs
# arg4: list of static libs
# arg5: any other flags to linker
define exec_build =
$(BIN_DIR)/$(1): $(2)
ifeq "x$(VERBOSE_BUILD)" "x"
	@echo "$(LDPRINTNAME) `basename $@`"; \
	$(LD) $(OPTFLAGS) $(2) -o $@ $(foreach lib, $(4), "-Wl,-Bstatic -l$(lib)") \
		$(foreach lib, $(3) "-Wl,-Bdynamic -l$(lib)") $(5) 
else 
	$(LD) $(OPTFLAGS) $(2) -o $@ $(foreach lib, $(4), "-Wl,-Bstatic -l$(lib)") \
		$(foreach lib, $(3) "-Wl,-Bdynamic -l$(lib)") $(5) 
endif
endef

default:			debug
debug:				all
opt:				all
optlto:				all
prof:				all
proflto:			all
eprof:				all
eproflto:			all
eopt:				all
eoptlto:			all
fullto:				all
fullltoprof:		all


CXX=g++
CC=$(CXX)
LD=$(CXX)
AR=ar
YACC=bison -y
BISON=bison
FLEX=flex
