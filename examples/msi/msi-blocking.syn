consts {
    NumCaches : 2;
    NumValues : 2;
    NumAddresses : 1;
    NumDirs : 1;
}

types {
    CacheIDType : symmetric(NumCaches);
    AddressType : symmetric(NumAddresses);
    ValueType : symmetric(NumValues);
    DirIDType : symmetric(NumDirs);
    
    // range is a (fully) closed range
    AckType : range(-NumCaches, NumCaches);
}

messages {
    foreach c in CacheIDType {
        foreach d in CacheIDType {
            foreach a in AddressType {

                GetXMsg[c][d][a] of unit;
                GetSMsg[c][d][a] of unit;
                WBMsg[c][d][a] of ValueType;

                FwdGetXMsg[c][d][a] of CacheIDType;
                FwdGetSMsg[c][d][a] of CacheIDType;

                foreach c2 in CacheIDType (!= c2 c) {
                    InvAckMsg[c][d][a] of unit;
                }

                UnblockSMsg[c][d][a] of unit;
                UnblockEMsg[c][d][a] of unit;

                WBAckMsg[c][d][a] of unit;
                DataMsgD2C[c][d][a] of (ValueType * AckType);

                foreach c2 in CacheIDType (!= c c2) {
                    DataMsgC2C[c][c2][d][a] of ValueType;
                }

                GetXMsg'[c][d][a] of unit;
                GetSMsg'[c][d][a] of unit;
                WBMsg'[c][d][a] of ValueType;

                UnblockSMsg'[c][d][a] of unit;
                UnblockEMsg'[c][d][a] of unit;

                FwdGetSMsg'[c][d][a] of CacheIDType;
                FwdGetXMsg'[c][d][a] of CacheIDType;

                foreach c2 in CacheIDType (!= c c2) {
                    InvAckMsg'[c][c2][d][a] of unit;
                }

                WBAckMsg'[c][d][a] of unit;
                DataMsgD2C'[c][d][a] of (ValueType * AckType);

                foreach c2 in CacheIDType (!= c c2) {
                    DataMsgC2C'[c][c2][d][a] of ValueType;
                }

                LDMsg[c][d][a] of unit;
                STMsg[c][d][a] of ValueType;
                EVMsg[c][d][a] of unit;
                LDAckMsg[c][d][a] of ValueType;
                STAckMsg[c][d][a] of ValueType;
                EVAckMsg[c][d][a] of unit;
            }
        }
    }
}

// Channel from Cache to Directory for a given Address
foreach c in CacheIDType
foreach d in DirIDType
foreach a in AddressType
channelautomaton ReqChannel[c][d][a] with compassion
{
    unordered, lossless, nonduplicating;
    capacity = 1;

    messages {
        GetXMsg[c][d][a];
        GetSMsg[c][d][a];
        WBMsg[c][d][a];
    }
}

// Channel INTO each cache for a given address
foreach c in CacheIDType
foreach d in DirIDType
foreach a in AddressType
channelautomaton RspChannel[c][d][a] with compassion
{
    unordered, lossless, nonduplicating;
    capacity = NumCaches;

    messages {
        InvAckMsg[c][d][a];
        WBAckMsg[c][d][a];
        DataMsgD2C[c][d][a];
        foreach c2 in CacheIDType {
            DataMsgC2C[c2][c][d][a];
        }
    }
}

// Unblocks INTO each directory for a given address
foreach d in DirIDType
foreach a in AddressType
channelautomaton UnblockChannel[d][a]
{
    unordered, lossless, nonduplicating;
    capacity = 1;

    messages {
        foreach c in CacheIDType {
            UnblockEMsg[c][d][a];
            UnblockSMsg[c][d][a];
        }
    }
}

// Forward messages INTO each cache for a given address
foreach c in CacheIDType
foreach d in DirIDType
foreach a in AddressType
channelautomaton FwdChannel[c][d][a]
{
    unordered, lossless, nonduplicating;
    capacity = 1;
    messages {
        FwdGetSMsg[c][d][a];
        FwdGetXMsg[c][d][a];
    }
}


foreach d in DirIDType
foreach a in AddressType
automaton CoherenceMonitor[d][a] with compassion
{
    states {
        Monitor_Initial : initial;
        Monitor_Error : error;
    }

    vars {
        LastValue : ValueType;
    }

    inports {
        foreach c in CacheIDType {
            STAckMsg[c][d][a];
            LDAckMsg[c][d][a];
        }
    }
    
    transitions {
        Monitor_Initial on STAckMsg[c][d][a] (v) { LastValue := v; } -> Monitor_Initial;
        Monitor_Initial on LDAckMsg[c][d][a] (v)
        if (v != LastValue) {} -> Monitor_Error;
        if (v = LastValue) {} -> Monitor_Initial;
    }
}

foreach c in CacheIDType
foreach d in DirIDType
foreach a in AddressType
automaton Environment[c][a][d] with compassion
{
    states {
        Env_Initial : initial;
        Env_PendingLD;
        Env_PendingST;
        Env_PendingEV;
        Env_Error : error
    }

    vars {
        PendingStore : ValueType;
    }

    inports {
        LDAckMsg[c][d][a];
        STAckMsg[c][d][a];
        EVAckMsg[c][d][a];                
    }

    outports {
        LDMsg[c][d][a];
        STMsg[c][d][a];
        EVMsg[c][d][a];
    }

    transitions {
        // Load flow
        Env_Initial send LDMsg[c][d][a] {} -> Env_PendingLD;
        Env_PendingLD on LDAckMsg[c][d][a] (v) {} -> Env_Initial;

        // Store flow
        foreach v in ValueType
        Env_Initial send STMsg[c][d][a] (v) { PendingStore := v; } -> Env_PendingST;
        Env_PendingST on STAckMsg[c][d][a]
        if (v = PendingStore) {} -> Env_Initial;
        if (v != PendingStore) {} -> Env_Error;
        
        // Evict flow
        Env_Initial send EVMsg[c][d][a] {} -> Env_PendingEV;
        Env_PendingEV on EVAckMsg[c][d][a] {} -> Env_Initial;
    }
}



foreach c in CacheIDType
foreach d in DirIDType
foreach a in AddressType
automaton Cache[c][d][a] with compassion
{
    states {
        C_I;
        C_S;
        C_M;
        C_IM;
        C_SM;
        C_IS;
        C_II;
    }

    vars {
        DataBlk : ValueType;
        AckCounter : AckType;
        PendingWrite : ValueType;
        FwdToCache : CacheIDType;
    }

    inports {
        LDMsg[c][d][a];
        STMsg[c][d][a];
        EVMsg[c][d][a];

        FwdGetXMsg'[c][d][a];
        FwdGetSMsg'[c][d][a];
        foreach c2 in CacheIDType (!= c2 c1) {
            InvAckMsg'[c2][c][d][a];
        }

        DataMsgD2C'[c][d][a];
        
        WBAckMsg'[c][d][a];

        foreach c1 in CacheIDType (!= c c1) {
            DataMsgC2C'[c1][c][d][a];
        }
    }
    
    outports {
        LDAckMsg[c][d][a];
        STAckMsg[c][d][a];
        EVAckMsg[c][d][a];

        UnblockSMsg[c][d][a];
        UnblockEMsg[c][d][a];

        foreach c2 in CacheIDType (!= c2 c1) {
            InvAckMsg[c][c2][d][a];
        }

        GetXMsg[c][d][a];
        GetSMsg[c][d][a];
        WBMsg[c][d][a];

        foreach c1 in CacheIDType (!= c c1) {
            DataMsgC2C[c][c1][d][a];
        }
    }

    transitions {
        // Transitions from I for Ext events
        C_I on LDMsg[c][d][a] {} -> send GetSMsg[c][d][a] {} -> C_IS;
        C_I on STMsg[c][d][a] (v) { PendingWrite := v; } -> 
        send GetXMsg[c][d][a] {} -> C_IM;
        C_I on EVMsg[c][d][a] {} -> send EVAckMsg[c][d][a] -> C_I;

        // Transitions for I on Fwd events
        C_I on FwdGetSMsg'[c][d][a] (c2) { FwdToCache := c2; } -> 
        send InvAckMsg[c][FwdToCache][d][a] { FwdToCache := undef; } -> C_I;
        
        // Transitions from S on Ext Events
        C_S on LDMsg[c][d][a] {} -> send LDAckMsg[c][d][a] (DataBlk) -> C_S;
        C_S on STMsg[c][d][a] (v) { PendingWrite := v; } -> 
        send GetXMsg[c][d][a] {} -> C_SM;
        C_S on EVMsg[c][d][a] {} -> 
        send EVAckMsg[c][d][a] { DataBlk := undef; } -> C_I;

        // Transitions from S on Fwd events
        C_S on FwdGetXMsg[c][d][a] (c2) { FwdToCache := c2; } -> 
        send InvAckMsg[c][FwdToCache][d][a] { DataBlk := undef } -> C_I;

        // Transitions from M on Ext events
        C_M on LDMsg[c][d][a] {} -> send LDAckMsg[c][d][a] (DataBlk) {} -> C_M;
        C_M on STMsg[c][d][a] (v) { DataBlk := v; } ->
        send STAckMsg[c][d][a] (DataBlk) {} -> C_M;
        C_M on EVMsg[c][d][a] {} -> send WBMsg[c][d][a] (DataBlk) {} -> C_II;

        // Transitions from M on Fwd events
        C_M on FwdGetSMsg'[c][d][a] (c2) { FwdToCache := c2; } ->
        send DataMsgC2C[c][FwdToCache][d][a] (DataBlk) { FwdToCache := undef; } -> C_S;
        
        C_M on FwdGetXMsg'[c][d][a] (c2) { FwdToCache := c2; } ->
        send DataMsgC2C[c][FwdToCache][d][a] (DataBlk) 
        { FwdToCache := undef; DataBlk := undef; } -> C_I;

        // Transitions from C_IM on Rsp Events
        C_IM on FwdGetXMsg'[c][d][a] (c2) { FwdToCache := c2; } ->
        send InvAckMsg[c][FwdToCache][d][a] {FwdToCache := undef; } -> C_IM;
        
        // Case when another cache gives me data
        foreach c2 in CacheIDType (!= c2 c) {
            C_IM on DataMsgC2C'[c2][c][d][a] (v) { DataBlk := v; } -> C_M;
        }
        
        // Case when data comes from dir ==> Must wait for acks
        C_IM on DataMsgD2C'[c][d][a] (v, NumAcks) 
        if (!= AckCounter NumAcks)
        { AckCounter := (- AckCounter NumAcks); DataBlk := v; } -> C_SM;
        if (= AckCounter NumAcks)
        { AckCounter := 0; DataBlk := v; } -> 
        send UnblockEMsg[c][d][a] { DataBlk := PendingStore; PendingStore := undef; } -> C_M;

        foreach c2 in CacheIDType (!= c2 c) {
            C_IM on InvAckMsg[c2][c][d][a] { AckCounter := (+ AckCounter 1); } -> C_IM;
        }

        // Transitions from C_SM on Ext Events
        C_SM on LDMsg[c][d][a] {} -> send LDAckMsg[c][d][a] (DataBlk) {} -> C_SM;
        
        // Transitions from C_SM on Rsp Events
        C_SM on FwdGetXMsg'[c][d][a] (c2) { FwdToCache := c2; } -> 
        send InvAckMsg[c][FwdToCache][d][a] {} -> C_SM;

        // Case where data comes from dir ==> Must wait for acks
        C_SM on DataMsgD2C'[c][d][a] (v, NumAcks)

        if (= NumAcks AckCounter) { AckCounter := 0; } -> 
        send UnblockEMsg[c][d][a] { DataBlk := PendingStore; PendingStore := undef; } -> 
        send STAckMsg[c][d][a] (DataBlk) {} -> C_M;

        if (!= NumAcks AckCounter) { AckCounter := (- AckCounter NumAcks) } -> C_SM;

        foreach c2 in CacheIDType (!= c2 c) {
            C_SM on InvAckMsg'[c2][c][d][a] 

            if (= AckCounter (- 1)) { AckCounter := 0; } ->
            send UnblockEMsg[c][d][a] { DataBlk := PendingStore; PendingStore := undef; } -> 
            send STAckMsg[c][d][a] (DataBlk) {} -> C_M;

            if (!= AckCounter (- 1)) { AckCounter := (+ AckCounter 1); } -> 
            send UnblockEMsg[c][d][a] { DataBlk := PendingStore; PendingStore := undef; } ->
            send STAckMsg[c][d][a] (DataBlk) {} -> C_M;
        }

        // Transitions from IS on Ext Events
        C_IS on FwdGetXMsg'[c][d][a] (c2) { FwdToCache := c2; } -> 
        send InvAckMsg[c][FwdToCache][d][a] {} -> C_IS;

        // Transitions on IS on Rsp Events
        C_IS on DataMsgD2C'[c][d][a] (v, _) { DataBlk := v; } -> 
        send UnblockSMsg[c][d][a] {} -> send LDAckMsg[c][d][a] (DataBlk) {} -> C_S;

        foreach c2 in CacheIDType (!= c2 c) {
            C_IS on DataMsgC2C'[c2][c][d][a] (v) -> { DataBlk := v; } ->
            send UnblockSMsg[c][d][a] -> send LDAckMsg[c][d][a] (DataBlk) -> C_S;
        }

        // Transitions on II on Rsp Events
        C_II on WBAckMsg'[c][d][a] -> C_I;

        C_II on FwdGetXMsg'[c][d][a] (c2) { FwdToCache := c2; } -> 
        send InvAckMsg[c][FwdToCache][d][a] -> C_I;

        C_II on FwdGetSMsg'[c][d][a] (_) -> C_I;
    }
}

foreach d in DirIDType
foreach a in AddressType
automaton Directory[d][a] with compassion
{
    states {
        D_I,
        D_S,
        D_M,
        D_BUSY,
        D_DATA,
        D_PENDING_UNBLOCK_E
    }

    vars {
        DataBlk : ValueType;
        ActiveId : CacheIDType;
        Sharers : array[CacheIDType] of boolean;
        NumSharers : 0..NumCaches;
        Owner : CacheIDType;
    }

    inports {
        foreach c in CacheIDType {
            GetXMsg'[c][d][a];
            GetSMsg'[c][d][a];
            WBMsg'[c][d][a];

            UnblockSMsg'[c][d][a];
            UnblockEMsg'[c][d][a];

            foreach c2 in CacheIDType (!= c2 c) {
                DataMsgC2C'[c2][c][d][a];
            }
        }
    }

    outports {
        foreach c in CacheIDType {
            FwdGetXMsg[c][d][a];
            FwdGetSMsg[c][d][a];
            DataMsgD2C[c][d][a];
        }
    }

    transitions {
        foreach c in CacheIDType {

            // Transitions from I
            D_I on GetXMsg'[c][d][a] { ActiveId := c; } -> 
            send DataMsgD2C[c][d][a] (DataBlk, 0) -> D_BUSY;
            
            D_I on GetSMsg'[c][d][a] { ActiveId := c; } ->
            send DataMsgD2C[c][d][a] (DataBlk, 0) -> D_BUSY;

            // Transitions from S
            D_S on GetXMsg'[c][d][a] { ActiveId := c; } ->
            send DataMsgD2C[c][d][a] (DataBlk, NumSharers) {} ->
            foreach c2 in CacheIDType {
                if (Sharers[c2]) send FwdGetXMsg[c2][d][a] (c) {};
                if (not Sharers[c2]) pass {};
            } -> D_BUSY;

            D_S on GetSMsg'[c][d][a] { ActiveId := c; } ->
            send DataMsgD2C[c][d][a] (DataBlk, 0) {} -> D_BUSY;

            // Transitions from M
            D_M on GetXMsg'[c][d][a] { ActiveId := c; } ->
            send FwdGetXMsg[Owner][d][a] (ActiveId) {} -> D_BUSY;
            
            D_M on GetSMsg'[c][d][a] { ActiveId := c; } ->
            send FwdGetSMsg[Owner][d][a] (ActiveId) {} -> D_BUSY_DATA;

            D_M on WBMsg'[c][d][a] (v) { DataBlk := v; Sharers[c] := false; } ->
            send WBAckMsg[c][d][a] {} -> D_I;
            
            // Transitions from BUSY
            D_BUSY on WBMsg'[c][d][a] (v)
            if (= c ActiveId) { DataBlk := v; } -> D_PENDING_UNBLOCK_E;
            if (!= c ActiveId) { Sharers[c] := false; DataBlk := v; } -> 
            send DataMsgD2C[ActiveId][d][a] (DataBlk, 0) -> D_BUSY;
            
            D_BUSY on UnblockEMsg'[c][d][a] { Sharers[c] := true; Owner := c; } -> D_M;

            D_BUSY on UnblockSMsg'[c][d][a] { Sharers[c] := true; Owner := undef; } -> D_S;
            
            foreach c2 in CacheIDType (!= c2 c) {
                D_BUSY on DataMsgC2C'[c2][c][d][a] (v) { DataBlk := v; } -> S;
            }

            // Transitions from BUSY_DATA
            D_BUSY_DATA on UnblockSMsg'[c][d][a] { Sharers[c] := true; } -> D_BUSY;
            foreach c2 in CacheIDType (!= c2 c) {
                D_BUSY_DATA on DataMsgC2C'[c2][c][d][a] (v) { DataBlk := v; } -> D_BUSY;
            }

            D_BUSY_DATA on WBMsg'[c][d][a] (v)
            if (= c ActiveId) { DataBlk := v; } -> D_PENDING_UNBLOCK_E;
            if (!= c ActiveId) { Sharers[c] := false; DataBlk := v; } -> 
            send DataMsgD2C[ActiveId][d][a] (DataBlk, 0) -> D_BUSY;

            // Transitions from PENDING_UNBLOCK_E
            D_PENDING_UNBLOCK_E on UnblockEMsg'[c][d][a] { Sharers[c] := false; Owner := undef; } -> D_I;
        }
    }
}

initialstate {
    foreach d in DirIDType
    foreach a in AddressType {
        CoherenceMonitor.state = Initial;
        foreach v in ValueType {
            CoherenceMonitor.LastValue = v;
            Directory[d][a].DataBlk = v;
        }
        Directory[d][a].ActiveId = undef;
        Directory[d][a].state = D_I;
        
        foreach c in CacheIDType {
            Directory[d][a].Sharers[c] = false;
            Cache[c][d][a].DataBlk = undef;
            Cache[c][d][a].PendingAcks = 0;
            Cache[c][d][a].PendingWrite = undef;
            Environment[c][d][a].state = Initial;
            Environment[c][d][a].PendingStore = undef;
            Cache[c][d][a].state = C_I;
        }
    }
}

foreach c in CacheIDType
foreach d in DirIDType
foreach a in AddressType
invariant CoherenceInvariant
{
    (-> (= Cache[c][d][a].state S) 
        (= Cache[c][d][a].DataBlk 
           CoherenceMonitor[d][a].LastValue))
}

foreach c in CacheIDType
foreach d in DirIDType
foreach a in AddressType
messageproperty LoadLivenessMonitor
{
    states {

    }

    inports {
        LDMsg[c][d][a];
        LDAckMsg[c][d][a];
    }

    property {
        (G (-> LDMsg[c][d][a] (F LDAckMsg[c][d][a])))
    }
}

foreach c in CacheIDType
foreach d in DirIDType
foreach a in AddressType
stateproperty StoreLivenessMonitor
{
    property {
        (G (-> (= Environment[c][d][a].state PendingSt) 
               (F (Environment[c][d][a].state Initial))))
    }
}

foreach c in CacheIDType
foreach d in DirIDType
foreach a in AddressType
messagemonitor WBLivenessMonitor
{
    states {
        MWB_Initial : initial;
        MWB_Accept : accepting;
    }

    inports {
        EVMsg[c][d][a]
    }

    transitions {
        MWB_Initial on all -> {} MWB_Initial;
        MWB_Initial on EVMsg[c][d][a] -> {} MWB_Accept;
        MWB_Accept on all but { EVAckMsg[c][d][a] } -> MWB_Accept;
    }
}

